// Code generated by Kitex v0.7.0. DO NOT EDIT.

package adder

import (
	kitex_gen "NewTikTok/kitex_gen"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return adderServiceInfo
}

var adderServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Adder"
	handlerType := (*kitex_gen.Adder)(nil)
	methods := map[string]kitex.MethodInfo{
		"Add": kitex.NewMethodInfo(addHandler, newAddArgs, newAddResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "",
		"ServiceFilePath": "",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.7.0",
		Extra:           extra,
	}
	return svcInfo
}

func addHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(kitex_gen.AddRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(kitex_gen.Adder).Add(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *AddArgs:
		success, err := handler.(kitex_gen.Adder).Add(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*AddResult)
		realResult.Success = success
	}
	return nil
}
func newAddArgs() interface{} {
	return &AddArgs{}
}

func newAddResult() interface{} {
	return &AddResult{}
}

type AddArgs struct {
	Req *kitex_gen.AddRequest
}

func (p *AddArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(kitex_gen.AddRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *AddArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *AddArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *AddArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *AddArgs) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(kitex_gen.AddRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var AddArgs_Req_DEFAULT *kitex_gen.AddRequest

func (p *AddArgs) GetReq() *kitex_gen.AddRequest {
	if !p.IsSetReq() {
		return AddArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *AddArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AddArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AddResult struct {
	Success *kitex_gen.AddResponse
}

var AddResult_Success_DEFAULT *kitex_gen.AddResponse

func (p *AddResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(kitex_gen.AddResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *AddResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *AddResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *AddResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *AddResult) Unmarshal(in []byte) error {
	if len(in) == 0 {
		return nil
	}
	msg := new(kitex_gen.AddResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *AddResult) GetSuccess() *kitex_gen.AddResponse {
	if !p.IsSetSuccess() {
		return AddResult_Success_DEFAULT
	}
	return p.Success
}

func (p *AddResult) SetSuccess(x interface{}) {
	p.Success = x.(*kitex_gen.AddResponse)
}

func (p *AddResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AddResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Add(ctx context.Context, Req *kitex_gen.AddRequest) (r *kitex_gen.AddResponse, err error) {
	var _args AddArgs
	_args.Req = Req
	var _result AddResult
	if err = p.c.Call(ctx, "Add", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
